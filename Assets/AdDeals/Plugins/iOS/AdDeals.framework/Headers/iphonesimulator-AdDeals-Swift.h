#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.0 (swiftlang-1001.0.69.5 clang-1001.0.46.3)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AdDeals",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol AdDealsDelegate;
enum AdDealsUserConsent : NSInteger;
@class AdDealsInterstitialManager;
@class AdDealsRewardedVideoManager;

SWIFT_CLASS("_TtC7AdDeals7AdDeals")
@interface AdDeals : NSObject
+ (void)initSDKWithAppId:(NSString * _Nonnull)appId andAppSecret:(NSString * _Nonnull)appSecret SWIFT_METHOD_FAMILY(none);
+ (void)setAdDealsDelegate:(id <AdDealsDelegate> _Nonnull)delegate;
+ (void)setDebugMode;
+ (void)setConsent:(enum AdDealsUserConsent)consent;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AdDealsInterstitialManager * _Nonnull Interstitial;)
+ (AdDealsInterstitialManager * _Nonnull)Interstitial SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AdDealsRewardedVideoManager * _Nonnull RewardedVideo;)
+ (AdDealsRewardedVideoManager * _Nonnull)RewardedVideo SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("AdFormatManager")
@interface AdDealsAdFormatManager : NSObject
- (BOOL)isCacheAdAvailable:(UIInterfaceOrientation)orientation SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol AdDealsInterstitialDelegate;
@class UIViewController;

SWIFT_CLASS_NAMED("InterstitialManager")
@interface AdDealsInterstitialManager : AdDealsAdFormatManager
- (void)setDelegate:(id <AdDealsInterstitialDelegate> _Nonnull)delegate;
- (BOOL)isCacheAdAvailable SWIFT_WARN_UNUSED_RESULT;
- (void)cacheAd;
- (void)cacheAd:(NSString * _Nullable)placementId;
- (void)showAd:(UIViewController * _Nonnull)controller;
- (void)showAd:(UIViewController * _Nonnull)controller placementId:(NSString * _Nullable)placementId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol AdDealsRewardedVideoDelegate;

SWIFT_CLASS_NAMED("RewardedVideoManager")
@interface AdDealsRewardedVideoManager : AdDealsAdFormatManager
- (void)setDelegate:(id <AdDealsRewardedVideoDelegate> _Nonnull)delegate;
- (BOOL)isCacheAdAvailable SWIFT_WARN_UNUSED_RESULT;
- (void)cacheAd;
- (void)cacheAd:(UIInterfaceOrientation)orientation;
- (void)cacheAdWithPlacementId:(NSString * _Nullable)placementId;
- (void)cacheAd:(UIInterfaceOrientation)orientation placementId:(NSString * _Nullable)placementId;
- (void)showAd:(UIViewController * _Nonnull)controller;
- (void)showAd:(UIViewController * _Nonnull)controller orientation:(UIInterfaceOrientation)orientation;
- (void)showAd:(UIViewController * _Nonnull)controller placementId:(NSString * _Nullable)placementId;
- (void)showAd:(UIViewController * _Nonnull)controller orientation:(UIInterfaceOrientation)orientation placementId:(NSString * _Nullable)placementId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP7AdDeals15AdDealsDelegate_")
@protocol AdDealsDelegate
@optional
- (void)initSDKSuccess SWIFT_METHOD_FAMILY(none);
- (void)initSDKFailWithError:(NSString * _Nonnull)error SWIFT_METHOD_FAMILY(none);
- (void)updateConsentSuccess;
- (void)updateConsentFailWithError:(NSString * _Nonnull)error;
@end


SWIFT_PROTOCOL("_TtP7AdDeals27AdDealsInterstitialDelegate_")
@protocol AdDealsInterstitialDelegate
@optional
- (void)cacheInterstitialAdSuccess;
- (void)cacheInterstitialAdFailed:(NSString * _Nonnull)error;
- (void)showInterstitialAdSuccess;
- (void)showInterstitialAdFailed:(NSString * _Nonnull)error;
- (void)minDelayBtwInterstitialAdsNotReached;
- (void)interstitialAdClosed;
- (void)interstitialAdClicked;
@end


SWIFT_PROTOCOL("_TtP7AdDeals28AdDealsRewardedVideoDelegate_")
@protocol AdDealsRewardedVideoDelegate
@optional
- (void)cacheVideoAdSuccess;
- (void)cacheVideoAdFailed:(NSString * _Nonnull)error;
- (void)showVideoAdSuccess;
- (void)showVideoAdFailed:(NSString * _Nonnull)error;
- (void)minDelayBtwVideoAdsNotReached;
- (void)videoAdClosed;
- (void)videoAdClicked;
- (void)videoRewardGranted;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, AdDealsUserConsent, "AdDealsUserConsent", closed) {
  AdDealsUserConsentNotApplicable = -1,
  AdDealsUserConsentRevoke = 0,
  AdDealsUserConsentGrant = 1,
};







@class UIImageView;

SWIFT_PROTOCOL("_TtP7AdDeals17SwiftyGifDelegate_")
@protocol SwiftyGifDelegate
@optional
- (void)gifDidStartWithSender:(UIImageView * _Nonnull)sender;
- (void)gifDidLoopWithSender:(UIImageView * _Nonnull)sender;
- (void)gifDidStopWithSender:(UIImageView * _Nonnull)sender;
- (void)gifURLDidFinishWithSender:(UIImageView * _Nonnull)sender;
- (void)gifURLDidFailWithSender:(UIImageView * _Nonnull)sender;
@end

@class UIColor;
@class UIFont;
@class NSCoder;

/// <h1>UICircularRing</h1>
/// This is the base class of <code>UICircularProgressRing</code> and <code>UICircularTimerRing</code>.
/// You should not instantiate this class, instead use one of the concrete classes provided
/// or subclass and make your own.
/// This is the UIView subclass that creates and handles everything
/// to do with the circular ring.
/// This class has a custom CAShapeLayer (<code>UICircularRingLayer</code>) which
/// handels the drawing and animating of the view
/// <h2>Author</h2>
/// Luis Padron
SWIFT_CLASS("_TtC7AdDeals14UICircularRing")
@interface UICircularRing : UIView
/// Whether or not the progress ring should be a full circle.
/// What this means is that the outer ring will always go from 0 - 360 degrees and
/// the inner ring will be calculated accordingly depending on current value.
/// <h2>Important</h2>
/// Default = true
/// When this property is true any value set for <code>endAngle</code> will be ignored.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) BOOL fullCircle;
/// A toggle for showing or hiding the value label.
/// If false the current value will not be shown.
/// <h2>Important</h2>
/// Default = true
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) BOOL shouldShowValueText;
/// The start angle for the entire progress ring view.
/// Please note that Cocoa Touch uses a clockwise rotating unit circle.
/// I.e: 90 degrees is at the bottom and 270 degrees is at the top
/// <h2>Important</h2>
/// Default = 0 (degrees)
/// Values should be in degrees (they’re converted to radians internally)
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat startAngle;
/// The end angle for the entire progress ring
/// Please note that Cocoa Touch uses a clockwise rotating unit circle.
/// I.e: 90 degrees is at the bottom and 270 degrees is at the top
/// <h2>Important</h2>
/// Default = 360 (degrees)
/// Values should be in degrees (they’re converted to radians internally)
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat endAngle;
/// The width of the outer ring for the progres bar
/// <h2>Important</h2>
/// Default = 10.0
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat outerRingWidth;
/// The color for the outer ring
/// <h2>Important</h2>
/// Default = UIColor.gray
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIColor * _Nonnull outerRingColor;
/// The width of the inner ring for the progres bar
/// <h2>Important</h2>
/// Default = 5.0
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat innerRingWidth;
/// The color of the inner ring for the progres bar
/// <h2>Important</h2>
/// Default = UIColor.blue
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIColor * _Nonnull innerRingColor;
/// The spacing between the outer ring and inner ring
/// <h2>Important</h2>
/// This only applies when using progressRingStyle = 1
/// Default = 1
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat innerRingSpacing;
/// The text color for the value label field
/// <h2>Important</h2>
/// Default = UIColor.black
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIColor * _Nonnull fontColor;
/// The font to be used for the progress indicator.
/// All font attributes are specified here except for font color, which is done
/// using <code>fontColor</code>.
/// <h2>Important</h2>
/// Default = UIFont.systemFont(ofSize: 18)
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIFont * _Nonnull font;
/// The direction the circle is drawn in
/// Example: true -> clockwise
/// <h2>Important</h2>
/// Default = true (draw the circle clockwise)
/// <h2>Author</h2>
/// Pete Walker
@property (nonatomic) BOOL isClockwise;
/// Overrides the default layer with the custom UICircularRingLayer class
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
/// Overriden public init to initialize the layer and view
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Overriden public init to initialize the layer and view
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Overriden because of custom layer drawing in UICircularRingLayer
- (void)drawRect:(CGRect)rect;
@end


SWIFT_CLASS("_TtC7AdDeals22UICircularProgressRing")
@interface UICircularProgressRing : UICircularRing
/// The value property for the progress ring.
/// <h2>Important</h2>
/// Default = 0
/// Must be a non-negative value. If this value falls below <code>minValue</code> it will be
/// clamped and set equal to <code>minValue</code>.
/// This cannot be used to get the value while the ring is animating, to get
/// current value while animating use <code>currentValue</code>.
/// The current value of the progress ring after animating, use startProgress(value:)
/// to alter the value with the option to animate and have a completion handler.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat value;
/// The minimum value for the progress ring. ex: (0) -> 100.
/// <h2>Important</h2>
/// Default = 100
/// Must be a non-negative value, the absolute value is taken when setting this property.
/// The <code>value</code> of the progress ring must NOT fall below <code>minValue</code> if it does the <code>value</code> property is clamped
/// and will be set equal to <code>value</code>, you will receive a warning message in the console.
/// Making this value greater than
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat minValue;
/// The maximum value for the progress ring. ex: 0 -> (100)
/// <h2>Important</h2>
/// Default = 100
/// Must be a non-negative value, the absolute value is taken when setting this property.
/// Unlike the <code>minValue</code> member <code>value</code> can extend beyond <code>maxValue</code>. What happens in this case
/// is the inner ring will do an extra loop through the outer ring, this is not noticible however.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat maxValue;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end







SWIFT_CLASS("_TtC7AdDeals19UICircularTimerRing")
@interface UICircularTimerRing : UICircularRing
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.0 (swiftlang-1001.0.69.5 clang-1001.0.46.3)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AdDeals",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol AdDealsDelegate;
enum AdDealsUserConsent : NSInteger;
@class AdDealsInterstitialManager;
@class AdDealsRewardedVideoManager;

SWIFT_CLASS("_TtC7AdDeals7AdDeals")
@interface AdDeals : NSObject
+ (void)initSDKWithAppId:(NSString * _Nonnull)appId andAppSecret:(NSString * _Nonnull)appSecret SWIFT_METHOD_FAMILY(none);
+ (void)setAdDealsDelegate:(id <AdDealsDelegate> _Nonnull)delegate;
+ (void)setDebugMode;
+ (void)setConsent:(enum AdDealsUserConsent)consent;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AdDealsInterstitialManager * _Nonnull Interstitial;)
+ (AdDealsInterstitialManager * _Nonnull)Interstitial SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AdDealsRewardedVideoManager * _Nonnull RewardedVideo;)
+ (AdDealsRewardedVideoManager * _Nonnull)RewardedVideo SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("AdFormatManager")
@interface AdDealsAdFormatManager : NSObject
- (BOOL)isCacheAdAvailable:(UIInterfaceOrientation)orientation SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol AdDealsInterstitialDelegate;
@class UIViewController;

SWIFT_CLASS_NAMED("InterstitialManager")
@interface AdDealsInterstitialManager : AdDealsAdFormatManager
- (void)setDelegate:(id <AdDealsInterstitialDelegate> _Nonnull)delegate;
- (BOOL)isCacheAdAvailable SWIFT_WARN_UNUSED_RESULT;
- (void)cacheAd;
- (void)cacheAd:(NSString * _Nullable)placementId;
- (void)showAd:(UIViewController * _Nonnull)controller;
- (void)showAd:(UIViewController * _Nonnull)controller placementId:(NSString * _Nullable)placementId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol AdDealsRewardedVideoDelegate;

SWIFT_CLASS_NAMED("RewardedVideoManager")
@interface AdDealsRewardedVideoManager : AdDealsAdFormatManager
- (void)setDelegate:(id <AdDealsRewardedVideoDelegate> _Nonnull)delegate;
- (BOOL)isCacheAdAvailable SWIFT_WARN_UNUSED_RESULT;
- (void)cacheAd;
- (void)cacheAd:(UIInterfaceOrientation)orientation;
- (void)cacheAdWithPlacementId:(NSString * _Nullable)placementId;
- (void)cacheAd:(UIInterfaceOrientation)orientation placementId:(NSString * _Nullable)placementId;
- (void)showAd:(UIViewController * _Nonnull)controller;
- (void)showAd:(UIViewController * _Nonnull)controller orientation:(UIInterfaceOrientation)orientation;
- (void)showAd:(UIViewController * _Nonnull)controller placementId:(NSString * _Nullable)placementId;
- (void)showAd:(UIViewController * _Nonnull)controller orientation:(UIInterfaceOrientation)orientation placementId:(NSString * _Nullable)placementId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP7AdDeals15AdDealsDelegate_")
@protocol AdDealsDelegate
@optional
- (void)initSDKSuccess SWIFT_METHOD_FAMILY(none);
- (void)initSDKFailWithError:(NSString * _Nonnull)error SWIFT_METHOD_FAMILY(none);
- (void)updateConsentSuccess;
- (void)updateConsentFailWithError:(NSString * _Nonnull)error;
@end


SWIFT_PROTOCOL("_TtP7AdDeals27AdDealsInterstitialDelegate_")
@protocol AdDealsInterstitialDelegate
@optional
- (void)cacheInterstitialAdSuccess;
- (void)cacheInterstitialAdFailed:(NSString * _Nonnull)error;
- (void)showInterstitialAdSuccess;
- (void)showInterstitialAdFailed:(NSString * _Nonnull)error;
- (void)minDelayBtwInterstitialAdsNotReached;
- (void)interstitialAdClosed;
- (void)interstitialAdClicked;
@end


SWIFT_PROTOCOL("_TtP7AdDeals28AdDealsRewardedVideoDelegate_")
@protocol AdDealsRewardedVideoDelegate
@optional
- (void)cacheVideoAdSuccess;
- (void)cacheVideoAdFailed:(NSString * _Nonnull)error;
- (void)showVideoAdSuccess;
- (void)showVideoAdFailed:(NSString * _Nonnull)error;
- (void)minDelayBtwVideoAdsNotReached;
- (void)videoAdClosed;
- (void)videoAdClicked;
- (void)videoRewardGranted;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, AdDealsUserConsent, "AdDealsUserConsent", closed) {
  AdDealsUserConsentNotApplicable = -1,
  AdDealsUserConsentRevoke = 0,
  AdDealsUserConsentGrant = 1,
};







@class UIImageView;

SWIFT_PROTOCOL("_TtP7AdDeals17SwiftyGifDelegate_")
@protocol SwiftyGifDelegate
@optional
- (void)gifDidStartWithSender:(UIImageView * _Nonnull)sender;
- (void)gifDidLoopWithSender:(UIImageView * _Nonnull)sender;
- (void)gifDidStopWithSender:(UIImageView * _Nonnull)sender;
- (void)gifURLDidFinishWithSender:(UIImageView * _Nonnull)sender;
- (void)gifURLDidFailWithSender:(UIImageView * _Nonnull)sender;
@end

@class UIColor;
@class UIFont;
@class NSCoder;

/// <h1>UICircularRing</h1>
/// This is the base class of <code>UICircularProgressRing</code> and <code>UICircularTimerRing</code>.
/// You should not instantiate this class, instead use one of the concrete classes provided
/// or subclass and make your own.
/// This is the UIView subclass that creates and handles everything
/// to do with the circular ring.
/// This class has a custom CAShapeLayer (<code>UICircularRingLayer</code>) which
/// handels the drawing and animating of the view
/// <h2>Author</h2>
/// Luis Padron
SWIFT_CLASS("_TtC7AdDeals14UICircularRing")
@interface UICircularRing : UIView
/// Whether or not the progress ring should be a full circle.
/// What this means is that the outer ring will always go from 0 - 360 degrees and
/// the inner ring will be calculated accordingly depending on current value.
/// <h2>Important</h2>
/// Default = true
/// When this property is true any value set for <code>endAngle</code> will be ignored.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) BOOL fullCircle;
/// A toggle for showing or hiding the value label.
/// If false the current value will not be shown.
/// <h2>Important</h2>
/// Default = true
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) BOOL shouldShowValueText;
/// The start angle for the entire progress ring view.
/// Please note that Cocoa Touch uses a clockwise rotating unit circle.
/// I.e: 90 degrees is at the bottom and 270 degrees is at the top
/// <h2>Important</h2>
/// Default = 0 (degrees)
/// Values should be in degrees (they’re converted to radians internally)
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat startAngle;
/// The end angle for the entire progress ring
/// Please note that Cocoa Touch uses a clockwise rotating unit circle.
/// I.e: 90 degrees is at the bottom and 270 degrees is at the top
/// <h2>Important</h2>
/// Default = 360 (degrees)
/// Values should be in degrees (they’re converted to radians internally)
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat endAngle;
/// The width of the outer ring for the progres bar
/// <h2>Important</h2>
/// Default = 10.0
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat outerRingWidth;
/// The color for the outer ring
/// <h2>Important</h2>
/// Default = UIColor.gray
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIColor * _Nonnull outerRingColor;
/// The width of the inner ring for the progres bar
/// <h2>Important</h2>
/// Default = 5.0
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat innerRingWidth;
/// The color of the inner ring for the progres bar
/// <h2>Important</h2>
/// Default = UIColor.blue
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIColor * _Nonnull innerRingColor;
/// The spacing between the outer ring and inner ring
/// <h2>Important</h2>
/// This only applies when using progressRingStyle = 1
/// Default = 1
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat innerRingSpacing;
/// The text color for the value label field
/// <h2>Important</h2>
/// Default = UIColor.black
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIColor * _Nonnull fontColor;
/// The font to be used for the progress indicator.
/// All font attributes are specified here except for font color, which is done
/// using <code>fontColor</code>.
/// <h2>Important</h2>
/// Default = UIFont.systemFont(ofSize: 18)
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIFont * _Nonnull font;
/// The direction the circle is drawn in
/// Example: true -> clockwise
/// <h2>Important</h2>
/// Default = true (draw the circle clockwise)
/// <h2>Author</h2>
/// Pete Walker
@property (nonatomic) BOOL isClockwise;
/// Overrides the default layer with the custom UICircularRingLayer class
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
/// Overriden public init to initialize the layer and view
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Overriden public init to initialize the layer and view
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Overriden because of custom layer drawing in UICircularRingLayer
- (void)drawRect:(CGRect)rect;
@end


SWIFT_CLASS("_TtC7AdDeals22UICircularProgressRing")
@interface UICircularProgressRing : UICircularRing
/// The value property for the progress ring.
/// <h2>Important</h2>
/// Default = 0
/// Must be a non-negative value. If this value falls below <code>minValue</code> it will be
/// clamped and set equal to <code>minValue</code>.
/// This cannot be used to get the value while the ring is animating, to get
/// current value while animating use <code>currentValue</code>.
/// The current value of the progress ring after animating, use startProgress(value:)
/// to alter the value with the option to animate and have a completion handler.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat value;
/// The minimum value for the progress ring. ex: (0) -> 100.
/// <h2>Important</h2>
/// Default = 100
/// Must be a non-negative value, the absolute value is taken when setting this property.
/// The <code>value</code> of the progress ring must NOT fall below <code>minValue</code> if it does the <code>value</code> property is clamped
/// and will be set equal to <code>value</code>, you will receive a warning message in the console.
/// Making this value greater than
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat minValue;
/// The maximum value for the progress ring. ex: 0 -> (100)
/// <h2>Important</h2>
/// Default = 100
/// Must be a non-negative value, the absolute value is taken when setting this property.
/// Unlike the <code>minValue</code> member <code>value</code> can extend beyond <code>maxValue</code>. What happens in this case
/// is the inner ring will do an extra loop through the outer ring, this is not noticible however.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat maxValue;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end







SWIFT_CLASS("_TtC7AdDeals19UICircularTimerRing")
@interface UICircularTimerRing : UICircularRing
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
